#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@Author: Yue Wang
@Contact: yuewangx@mit.edu
@File: main.py
@Time: 2018/10/13 10:39 PM
"""


from __future__ import print_function
import os
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.optim.lr_scheduler import CosineAnnealingLR
from data import ModelNet40
from model import PointNet, DGCNN
import numpy as np
from torch.utils.data import DataLoader
from util import cal_loss, IOStream
import sklearn.metrics as metrics


def _init_(): #初始化
    if not os.path.exists('checkpoints'):  #创建checkpoint文件夹
        os.makedirs('checkpoints')
    if not os.path.exists('checkpoints/'+args.exp_name):
        os.makedirs('checkpoints/'+args.exp_name)
    if not os.path.exists('checkpoints/'+args.exp_name+'/'+'models'):
        os.makedirs('checkpoints/'+args.exp_name+'/'+'models')
    os.system('cp main.py checkpoints'+'/'+args.exp_name+'/'+'main.py.backup')
    os.system('cp model.py checkpoints' + '/' + args.exp_name + '/' + 'model.py.backup')
    os.system('cp util.py checkpoints' + '/' + args.exp_name + '/' + 'util.py.backup')
    os.system('cp data.py checkpoints' + '/' + args.exp_name + '/' + 'data.py.backup')

def train(args, io):  #训练函数
    train_loader = DataLoader(ModelNet40(partition='train', num_points=args.num_points), num_workers=8,
                              batch_size=args.batch_size, shuffle=True, drop_last=True)
    test_loader = DataLoader(ModelNet40(partition='test', num_points=args.num_points), num_workers=8,
                             batch_size=args.test_batch_size, shuffle=True, drop_last=False)

    device = torch.device("cuda" if args.cuda else "cpu")

    #Try to load models  载入模型
    if args.model == 'pointnet':        #PointNet 模型
        model = PointNet(args).to(device)
    elif args.model == 'dgcnn':     #DGCNN模型
        model = DGCNN(args).to(device)
    else:
        raise Exception("Not implemented")   #其余模型尚未实现
    print(str(model))   # 输出模型与其详情

    model = nn.DataParallel(model)  #采用 数据并行 策略 来训练 ，以使多个GPU来分担显存消耗
    print("Let's use", torch.cuda.device_count(), "GPUs!")  #让我们使用 当前数量的 GPU来训练

    if args.use_sgd:   #如果是采用 stochastic gradient descent 随机梯度下降策略来训练
        print("Use SGD")  #优化器 采用 SGD 输入的参数有:     lr是学习率(取0.1)  momentum是动量(防止学习的震荡，取0.9)  weight_decay是权重衰减(防止过度拟合的正则化项 惩罚项)
        opt = optim.SGD(model.parameters(), lr=args.lr*100, momentum=args.momentum, weight_decay=1e-4)
    else:              #如果是采用 Adaptive moment estimation 适应性矩阵估计 策略来训练
        print("Use Adam")
        opt = optim.Adam(model.parameters(), lr=args.lr, weight_decay=1e-4)

    #定义一个 采用 余弦退火策略 的 学习率 调度器
    scheduler = CosineAnnealingLR(opt, args.epochs, eta_min=args.lr) #采用 余弦退火 策略的学习率调整调度策略 参数分别为 opt(优化器，提供初始学习率)  epochs学习代数  eta_min最小学习率
    
    criterion = cal_loss #定义一个评判函数  直接用了 util 类中的 cal_loss 损失计算函数

    best_test_acc = 0  #定义最佳 的验证集 正确率

    #开始迭代训练  训练中 每一代 分为 训练过程 与 验证过程
    for epoch in range(args.epochs):
        scheduler.step()  #更新优化器的学习率，一般按照epoch为单位进行更新
        ####################
        # Train
        ####################
        train_loss = 0.0
        count = 0.0
        model.train()  #调用 model 中的训练函数
        train_pred = []
        train_true = []
        for data, label in train_loader:
            data, label = data.to(device), label.to(device).squeeze()
            data = data.permute(0, 2, 1)
            batch_size = data.size()[0]
            opt.zero_grad()
            logits = model(data)
            loss = criterion(logits, label)
            loss.backward()
            opt.step()
            preds = logits.max(dim=1)[1]
            count += batch_size
            train_loss += loss.item() * batch_size
            train_true.append(label.cpu().numpy())
            train_pred.append(preds.detach().cpu().numpy())
        train_true = np.concatenate(train_true)   #真实集
        train_pred = np.concatenate(train_pred)   #预测集
        outstr = 'Train %d, loss: %.6f, train acc: %.6f, train avg acc: %.6f' % (epoch, #训练代数
                                                                                 train_loss*1.0/count,
                                                                                 metrics.accuracy_score(
                                                                                     train_true, train_pred),
                                                                                 metrics.balanced_accuracy_score(
                                                                                     train_true, train_pred))
        io.cprint(outstr)  #输出

        ####################
        # Test
        ####################
        test_loss = 0.0
        count = 0.0
        model.eval()    #调用 model 中的评估函数以证训练
        test_pred = []
        test_true = []
        for data, label in test_loader:
            data, label = data.to(device), label.to(device).squeeze()
            data = data.permute(0, 2, 1)
            batch_size = data.size()[0]
            logits = model(data)
            loss = criterion(logits, label)
            preds = logits.max(dim=1)[1]
            count += batch_size
            test_loss += loss.item() * batch_size
            test_true.append(label.cpu().numpy())
            test_pred.append(preds.detach().cpu().numpy())
        test_true = np.concatenate(test_true)
        test_pred = np.concatenate(test_pred)
        test_acc = metrics.accuracy_score(test_true, test_pred)
        avg_per_class_acc = metrics.balanced_accuracy_score(test_true, test_pred)
        outstr = 'Test %d, loss: %.6f, test acc: %.6f, test avg acc: %.6f' % (epoch,
                                                                              test_loss*1.0/count,
                                                                              test_acc,
                                                                              avg_per_class_acc)
        io.cprint(outstr)

        if test_acc >= best_test_acc:  #如果 验证正确率 比 之前最佳的验证集正确率 要高,则更新最佳验证正确率,保存训练的成果
            best_test_acc = test_acc
            torch.save(model.state_dict(), 'checkpoints/%s/models/model.t7' % args.exp_name)  #保存训练的结果


def test(args, io):   #测试训练的结果
    test_loader = DataLoader(ModelNet40(partition='test', num_points=args.num_points),       #载入测试集
                             batch_size=args.test_batch_size, shuffle=True, drop_last=False)

    device = torch.device("cuda" if args.cuda else "cpu")  #设备如果不是cuda显卡则是cpu训练

    #Try to load models
    model = DGCNN(args).to(device)
    model = nn.DataParallel(model)          #模型测试策略采用多显卡并行
    model.load_state_dict(torch.load(args.model_path))
    model = model.eval()  #调用 model 中的评估函数从以测试训练成果
    test_acc = 0.0
    count = 0.0
    test_true = []
    test_pred = []

    # for item in dir(test_loader):  # top_k_metergroup是某类的一个实例化对象
    #     print(item)

    # print(test_loader.batch_size)

    count_xx=0
    for data, label in test_loader:
        data, label = data.to(device), label.to(device).squeeze()  #将数据从内存转移到GPU显存以加速
        #lable应该为batch_size大小的数组，里面是分类的真实情况
        data = data.permute(0, 2, 1)      #data 的形式为torch.Size([16, 3, 1024])
        batch_size = data.size()[0]
        logits = model(data)           #logits的形式为torch.Size([16, 40])
        preds = logits.max(dim=1)[1]  #preds 的形式为tensor([17, 12, 12, 22, 27, 17,  1, 37, 26,  8, 17, 33,  7, 17, 22, 22]，device='cuda:0') batch_size大小的数组，里面是预测分类值
        test_true.append(label.cpu().numpy())  #将GPU显存上的数据转移到CPU上，再numpy数据化
        test_pred.append(preds.detach().cpu().numpy())
        count_xx=count_xx+1
    print("count_xx",count_xx)

    test_true = np.concatenate(test_true)  #2468个真实分类值
    test_pred = np.concatenate(test_pred)  #2468个分类预测值
    test_acc = metrics.accuracy_score(test_true, test_pred)
    avg_per_class_acc = metrics.balanced_accuracy_score(test_true, test_pred)

    outstr = 'Test :: test acc: %.6f, test avg acc: %.6f'%(test_acc, avg_per_class_acc)
    io.cprint(outstr)  #输出 测试集 测试训练成果 的最终的正确率


if __name__ == "__main__":
    # Training settings   训练超参数的设置
    parser = argparse.ArgumentParser(description='Point Cloud Recognition')
    parser.add_argument('--exp_name', type=str, default='exp', metavar='N',   #训练实验的名称 分本实验主要分为 1024点的采样 与 2048点的采样
                        help='Name of the experiment')
    parser.add_argument('--model', type=str, default='dgcnn', metavar='N',  #使用 dgcnn模型进行训练
                        choices=['pointnet', 'dgcnn'],
                        help='Model to use, [pointnet, dgcnn]')
    parser.add_argument('--dataset', type=str, default='modelnet40', metavar='N',
                        choices=['modelnet40'])
    parser.add_argument('--batch_size', type=int, default=16, metavar='batch_size',
                        help='Size of batch)')
    parser.add_argument('--test_batch_size', type=int, default=16, metavar='batch_size',
                        help='Size of batch)')
    parser.add_argument('--epochs', type=int, default=250, metavar='N',
                        help='number of episode to train ')
    parser.add_argument('--use_sgd', type=bool, default=True,
                        help='Use SGD')
    parser.add_argument('--lr', type=float, default=0.001, metavar='LR',   #训练超参数  学习率 SGD策略时取0.1
                        help='learning rate (default: 0.001, 0.1 if using sgd)')
    parser.add_argument('--momentum', type=float, default=0.9, metavar='M',  #训练超参数  动量(防止训练震荡) 取0.9
                        help='SGD momentum (default: 0.9)')
    parser.add_argument('--no_cuda', type=bool, default=False,
                        help='enables CUDA training')
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')
    parser.add_argument('--eval', type=bool,  default=False,
                        help='evaluate the model')
    parser.add_argument('--num_points', type=int, default=1024, #采样点数
                        help='num of points to use')
    parser.add_argument('--dropout', type=float, default=0.5,
                        help='dropout rate')
    parser.add_argument('--emb_dims', type=int, default=1024, metavar='N',  #最终嵌入结果的维度数
                        help='Dimension of embeddings')
    parser.add_argument('--k', type=int, default=20, metavar='N',  #最近邻数量
                        help='Num of nearest neighbors to use')
    parser.add_argument('--model_path', type=str, default='', metavar='N',
                        help='Pretrained model path')
    args = parser.parse_args()

    _init_()   #初始化 创建checkpoints文件夹

    io = IOStream('checkpoints/' + args.exp_name + '/run.log')   #将每一次训练与其超参数记载进 run.log文件之中
    io.cprint(str(args))

    args.cuda = not args.no_cuda and torch.cuda.is_available()  #布尔值 检测训练环境是否是cuda显卡的环境
    torch.manual_seed(args.seed)  #为CPU生成随机数种子 其作用是 使 之后的 rand 返回值相同
    if args.cuda:   #如果环境是 cuda显卡 则输出 当前的环境情况
        io.cprint(
            'Using GPU : ' + str(torch.cuda.current_device()) + ' from ' + str(torch.cuda.device_count()) + ' devices')  #目前使用GPU的序号  GPU总数
        torch.cuda.manual_seed(args.seed) #为特定GPU生成随机数种子 其作用是 使 之后的 rand 返回值相同
    else:  #正在使用 CPU训练的情况
        io.cprint('Using CPU')

    if not args.eval:    #是否进行评估
        train(args, io)    #进行训练 训练出 .t7 文件
    else:
        test(args, io)  #用模型训练出的结果 .t7 文件进行测试集的验证
